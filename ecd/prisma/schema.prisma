datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole  @default(CAREGIVER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  staffProfile Staff?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  GOVERNMENT_OFFICIAL
  SCHOOL_ADMIN
  CAREGIVER
}

model School {
  id       String @id @default(cuid())
  name     String @unique
  address  String
  phone    String
  email    String @unique
  staff    Staff[]
  children Child[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id        String @id @default(cuid())
  userId    String @unique
  schoolId  String
  firstName String
  lastName  String
  phone     String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Child {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  schoolId      String
  guardianName  String
  guardianPhone String
  guardianId    String

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  attendances   Attendance[]
  growthRecords GrowthRecord[]
  immunizations Immunization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id      String   @id @default(cuid())
  childId String
  date    DateTime
  present Boolean

  child Child @relation(fields: [childId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model GrowthRecord {
  id       String   @id @default(cuid())
  childId  String
  date     DateTime
  heightCm Float
  weightKg Float

  child Child @relation(fields: [childId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Immunization {
  id      String   @id @default(cuid())
  childId String
  vaccine String
  date    DateTime

  child Child @relation(fields: [childId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}